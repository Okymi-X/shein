#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SHEIN_SEN - Script de Configuration et Installation
Script d'aide pour configurer rapidement le syst√®me SHEIN_SEN
"""

import os
import sys
import subprocess
import json
from pathlib import Path
from typing import Dict, List, Optional
import shutil

class SheinSenSetup:
    """Assistant de configuration SHEIN_SEN"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.requirements_installed = False
        
    def print_banner(self):
        """Afficher la banni√®re de bienvenue"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üõçÔ∏è SHEIN_SEN üõçÔ∏è                        ‚ïë
‚ïë        Syst√®me d'Automatisation des Commandes Group√©es       ‚ïë
‚ïë                    Shein au S√©n√©gal üá∏üá≥                       ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üöÄ Assistant de Configuration et Installation
        """)
    
    def check_python_version(self) -> bool:
        """V√©rifier la version de Python"""
        print("üêç V√©rification de la version Python...")
        
        if sys.version_info < (3, 8):
            print("‚ùå Python 3.8+ requis. Version actuelle:", sys.version)
            return False
        
        print(f"‚úÖ Python {sys.version.split()[0]} d√©tect√©")
        return True
    
    def check_dependencies(self) -> Dict[str, bool]:
        """V√©rifier les d√©pendances syst√®me"""
        print("\nüì¶ V√©rification des d√©pendances...")
        
        dependencies = {
            'pip': False,
            'git': False,
            'chrome': False
        }
        
        # V√©rifier pip
        try:
            subprocess.run([sys.executable, '-m', 'pip', '--version'], 
                         capture_output=True, check=True)
            dependencies['pip'] = True
            print("‚úÖ pip disponible")
        except subprocess.CalledProcessError:
            print("‚ùå pip non trouv√©")
        
        # V√©rifier git
        try:
            subprocess.run(['git', '--version'], 
                         capture_output=True, check=True)
            dependencies['git'] = True
            print("‚úÖ git disponible")
        except (subprocess.CalledProcessError, FileNotFoundError):
            print("‚ö†Ô∏è git non trouv√© (optionnel)")
        
        # V√©rifier Chrome/Chromium
        chrome_paths = [
            'google-chrome',
            'chromium-browser',
            'chromium',
            r'C:\Program Files\Google\Chrome\Application\chrome.exe',
            r'C:\Program Files (x86)\Google\Chrome\Application\chrome.exe'
        ]
        
        for chrome_path in chrome_paths:
            if shutil.which(chrome_path) or Path(chrome_path).exists():
                dependencies['chrome'] = True
                print("‚úÖ Chrome/Chromium trouv√©")
                break
        
        if not dependencies['chrome']:
            print("‚ö†Ô∏è Chrome/Chromium non trouv√© (requis pour Playwright)")
        
        return dependencies
    
    def install_requirements(self) -> bool:
        """Installer les d√©pendances Python"""
        print("\nüì• Installation des d√©pendances Python...")
        
        requirements_file = self.project_root / 'requirements.txt'
        
        if not requirements_file.exists():
            print("‚ùå Fichier requirements.txt non trouv√©")
            return False
        
        try:
            # Installer les requirements
            subprocess.run([
                sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)
            ], check=True)
            
            print("‚úÖ D√©pendances Python install√©es")
            
            # Installer Playwright browsers
            print("üé≠ Installation des navigateurs Playwright...")
            subprocess.run([
                sys.executable, '-m', 'playwright', 'install', 'chromium'
            ], check=True)
            
            print("‚úÖ Navigateurs Playwright install√©s")
            self.requirements_installed = True
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Erreur installation: {e}")
            return False
    
    def create_directories(self):
        """Cr√©er les r√©pertoires n√©cessaires"""
        print("\nüìÅ Cr√©ation des r√©pertoires...")
        
        directories = [
            'data',
            'data/backups',
            'logs',
            'cookies'
        ]
        
        for directory in directories:
            dir_path = self.project_root / directory
            dir_path.mkdir(exist_ok=True)
            print(f"‚úÖ {directory}/")
    
    def setup_environment_file(self):
        """Configurer le fichier d'environnement"""
        print("\n‚öôÔ∏è Configuration du fichier d'environnement...")
        
        env_example = self.project_root / '.env.example'
        env_file = self.project_root / '.env'
        
        if env_file.exists():
            response = input("üìÑ Le fichier .env existe d√©j√†. Le remplacer? (y/N): ")
            if response.lower() != 'y':
                print("‚è≠Ô∏è Configuration .env ignor√©e")
                return
        
        if env_example.exists():
            shutil.copy2(env_example, env_file)
            print("‚úÖ Fichier .env cr√©√© √† partir de .env.example")
            print("‚ö†Ô∏è IMPORTANT: √âditez le fichier .env avec vos vraies cl√©s API")
        else:
            print("‚ùå Fichier .env.example non trouv√©")
    
    def interactive_config(self):
        """Configuration interactive des cl√©s API"""
        print("\nüîë Configuration interactive des cl√©s API")
        print("(Appuyez sur Entr√©e pour ignorer)")
        
        config = {}
        
        # OpenAI API Key
        openai_key = input("ü§ñ Cl√© API OpenAI (sk-...): ").strip()
        if openai_key:
            config['OPENAI_API_KEY'] = openai_key
        
        # Twilio Configuration
        print("\nüì± Configuration Twilio WhatsApp:")
        twilio_sid = input("   Account SID: ").strip()
        if twilio_sid:
            config['TWILIO_ACCOUNT_SID'] = twilio_sid
        
        twilio_token = input("   Auth Token: ").strip()
        if twilio_token:
            config['TWILIO_AUTH_TOKEN'] = twilio_token
        
        twilio_number = input("   Num√©ro WhatsApp (whatsapp:+14155238886): ").strip()
        if twilio_number:
            config['TWILIO_WHATSAPP_NUMBER'] = twilio_number
        
        # Admin WhatsApp
        admin_number = input("üë§ Num√©ro Admin WhatsApp (whatsapp:+221XXXXXXXXX): ").strip()
        if admin_number:
            config['ADMIN_WHATSAPP_NUMBER'] = admin_number
        
        # Sauvegarder la configuration
        if config:
            self.update_env_file(config)
            print("‚úÖ Configuration sauvegard√©e dans .env")
        else:
            print("‚è≠Ô∏è Aucune configuration fournie")
    
    def update_env_file(self, config: Dict[str, str]):
        """Mettre √† jour le fichier .env"""
        env_file = self.project_root / '.env'
        
        # Lire le fichier existant
        lines = []
        if env_file.exists():
            with open(env_file, 'r', encoding='utf-8') as f:
                lines = f.readlines()
        
        # Mettre √† jour les valeurs
        updated_lines = []
        updated_keys = set()
        
        for line in lines:
            line = line.strip()
            if '=' in line and not line.startswith('#'):
                key = line.split('=')[0]
                if key in config:
                    updated_lines.append(f"{key}={config[key]}\n")
                    updated_keys.add(key)
                else:
                    updated_lines.append(line + '\n')
            else:
                updated_lines.append(line + '\n')
        
        # Ajouter les nouvelles cl√©s
        for key, value in config.items():
            if key not in updated_keys:
                updated_lines.append(f"{key}={value}\n")
        
        # Sauvegarder
        with open(env_file, 'w', encoding='utf-8') as f:
            f.writelines(updated_lines)
    
    def test_configuration(self) -> bool:
        """Tester la configuration"""
        print("\nüß™ Test de la configuration...")
        
        try:
            # Importer et tester la configuration
            sys.path.insert(0, str(self.project_root))
            from config import Config
            
            # Tester la cr√©ation des r√©pertoires
            Config.create_directories()
            print("‚úÖ Cr√©ation des r√©pertoires")
            
            # Tester la validation de la config
            if Config.validate_config():
                print("‚úÖ Configuration valide")
                return True
            else:
                print("‚ö†Ô∏è Configuration incompl√®te (cl√©s API manquantes)")
                return False
                
        except Exception as e:
            print(f"‚ùå Erreur test configuration: {e}")
            return False
    
    def create_sample_data(self):
        """Cr√©er des donn√©es d'exemple"""
        print("\nüìä Cr√©ation de donn√©es d'exemple...")
        
        try:
            sys.path.insert(0, str(self.project_root))
            from data_manager import DataManager
            
            dm = DataManager()
            
            # Ajouter quelques commandes d'exemple
            sample_orders = [
                {
                    'user_phone': 'whatsapp:+221701234567',
                    'user_name': 'Awa Diop',
                    'product_url': 'https://www.shein.com/fr/item12345',
                    'size': 'M',
                    'color': 'Rouge',
                    'quantity': 2,
                    'estimated_price': 15.99
                },
                {
                    'user_phone': 'whatsapp:+221707654321',
                    'user_name': 'Fatou Sall',
                    'product_url': 'https://www.shein.com/fr/item67890',
                    'size': 'L',
                    'color': 'Bleu',
                    'quantity': 1,
                    'estimated_price': 22.50
                }
            ]
            
            for order in sample_orders:
                dm.add_order(**order)
            
            print("‚úÖ Donn√©es d'exemple cr√©√©es")
            
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation donn√©es d'exemple: {e}")
    
    def show_next_steps(self):
        """Afficher les prochaines √©tapes"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéâ Installation Termin√©e! üéâ               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

üìã Prochaines √©tapes:

1. üîë Configurez vos cl√©s API dans le fichier .env
   - OpenAI API Key: https://platform.openai.com/api-keys
   - Twilio: https://www.twilio.com/console

2. üì± Configurez WhatsApp Sandbox Twilio:
   - Allez sur: https://console.twilio.com/us1/develop/sms/try-it-out/whatsapp-learn
   - Configurez le webhook: https://your-domain.com/webhook

3. üöÄ D√©marrez le syst√®me:
   python main.py

4. üß™ Testez avec WhatsApp:
   Envoyez un lien Shein √† votre num√©ro Twilio

5. üìä V√©rifiez le statut:
   http://localhost:5000/status

üìö Documentation compl√®te: README.md

üÜò Support: Consultez les logs dans le dossier logs/
        """)
    
    def run_setup(self):
        """Ex√©cuter la configuration compl√®te"""
        self.print_banner()
        
        # V√©rifications pr√©liminaires
        if not self.check_python_version():
            return False
        
        dependencies = self.check_dependencies()
        if not dependencies['pip']:
            print("‚ùå pip est requis pour continuer")
            return False
        
        # Installation
        if not self.install_requirements():
            print("‚ùå √âchec installation des d√©pendances")
            return False
        
        # Configuration
        self.create_directories()
        self.setup_environment_file()
        
        # Configuration interactive
        response = input("\nüîß Voulez-vous configurer les cl√©s API maintenant? (y/N): ")
        if response.lower() == 'y':
            self.interactive_config()
        
        # Tests
        self.test_configuration()
        
        # Donn√©es d'exemple
        response = input("\nüìä Cr√©er des donn√©es d'exemple? (y/N): ")
        if response.lower() == 'y':
            self.create_sample_data()
        
        # Finalisation
        self.show_next_steps()
        return True

def main():
    """Point d'entr√©e principal"""
    try:
        setup = SheinSenSetup()
        success = setup.run_setup()
        
        if success:
            print("\n‚úÖ Configuration termin√©e avec succ√®s!")
            return 0
        else:
            print("\n‚ùå √âchec de la configuration")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Configuration interrompue par l'utilisateur")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        return 1

if __name__ == "__main__":
    sys.exit(main())