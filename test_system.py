#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SHEIN_SEN - Script de Test du Syst√®me
Script pour tester tous les composants du syst√®me SHEIN_SEN
"""

import os
import sys
import json
import asyncio
from pathlib import Path
from typing import Dict, List, Optional
import traceback
from datetime import datetime

# Ajouter le r√©pertoire du projet au path
sys.path.insert(0, str(Path(__file__).parent))

class SheinSenTester:
    """Testeur pour le syst√®me SHEIN_SEN"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.test_results = {}
        self.errors = []
        
    def print_header(self, title: str):
        """Afficher un en-t√™te de section"""
        print(f"\n{'='*60}")
        print(f"üß™ {title}")
        print(f"{'='*60}")
    
    def print_test(self, test_name: str, success: bool, details: str = ""):
        """Afficher le r√©sultat d'un test"""
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name}")
        if details:
            print(f"   {details}")
        
        self.test_results[test_name] = {
            'success': success,
            'details': details,
            'timestamp': datetime.now().isoformat()
        }
    
    def test_imports(self) -> bool:
        """Tester les imports des modules"""
        self.print_header("Test des Imports")
        
        modules_to_test = [
            ('config', 'Config'),
            ('data_manager', 'DataManager'),
            ('ai_processor', 'AIProcessor'),
            ('shein_bot', 'SheinBot'),
            ('recap_export', 'RecapExporter'),
            ('whatsapp_listener', 'WhatsAppListener'),
            ('main', 'SheinSenOrchestrator')
        ]
        
        all_success = True
        
        for module_name, class_name in modules_to_test:
            try:
                module = __import__(module_name)
                if hasattr(module, class_name):
                    self.print_test(f"Import {module_name}.{class_name}", True)
                else:
                    self.print_test(f"Import {module_name}.{class_name}", False, 
                                  f"Classe {class_name} non trouv√©e")
                    all_success = False
            except Exception as e:
                self.print_test(f"Import {module_name}", False, str(e))
                all_success = False
                self.errors.append(f"Import {module_name}: {e}")
        
        return all_success
    
    def test_configuration(self) -> bool:
        """Tester la configuration"""
        self.print_header("Test de Configuration")
        
        try:
            from config import Config
            
            # Test cr√©ation des r√©pertoires
            try:
                Config.create_directories()
                self.print_test("Cr√©ation des r√©pertoires", True)
            except Exception as e:
                self.print_test("Cr√©ation des r√©pertoires", False, str(e))
                return False
            
            # Test validation de la config
            try:
                is_valid = Config.validate_config()
                if is_valid:
                    self.print_test("Validation configuration", True, "Toutes les cl√©s API sont pr√©sentes")
                else:
                    self.print_test("Validation configuration", False, "Cl√©s API manquantes (normal si pas encore configur√©)")
            except Exception as e:
                self.print_test("Validation configuration", False, str(e))
                return False
            
            # Test des constantes
            required_attrs = ['OPENAI_API_KEY', 'DATA_DIR', 'COOKIES_DIR', 'LOGS_DIR']
            for attr in required_attrs:
                if hasattr(Config, attr):
                    self.print_test(f"Constante {attr}", True)
                else:
                    self.print_test(f"Constante {attr}", False, "Attribut manquant")
                    return False
            
            return True
            
        except Exception as e:
            self.print_test("Configuration g√©n√©rale", False, str(e))
            self.errors.append(f"Configuration: {e}")
            return False
    
    def test_data_manager(self) -> bool:
        """Tester le gestionnaire de donn√©es"""
        self.print_header("Test du Gestionnaire de Donn√©es")
        
        try:
            from data_manager import DataManager
            
            # Initialisation
            try:
                dm = DataManager()
                self.print_test("Initialisation DataManager", True)
            except Exception as e:
                self.print_test("Initialisation DataManager", False, str(e))
                return False
            
            # Test ajout d'une commande
            try:
                order_id = dm.add_order(
                    user_phone="whatsapp:+221701234567",
                    user_name="Test User",
                    product_url="https://www.shein.com/fr/test123",
                    size="M",
                    color="Rouge",
                    quantity=1,
                    estimated_price=15.99
                )
                self.print_test("Ajout commande", True, f"ID: {order_id}")
            except Exception as e:
                self.print_test("Ajout commande", False, str(e))
                return False
            
            # Test r√©cup√©ration des commandes
            try:
                orders = dm.get_user_orders("whatsapp:+221701234567")
                if orders:
                    self.print_test("R√©cup√©ration commandes utilisateur", True, f"{len(orders)} commande(s)")
                else:
                    self.print_test("R√©cup√©ration commandes utilisateur", False, "Aucune commande trouv√©e")
            except Exception as e:
                self.print_test("R√©cup√©ration commandes utilisateur", False, str(e))
                return False
            
            # Test statistiques
            try:
                stats = dm.get_statistics()
                self.print_test("Statistiques", True, f"Total: {stats.get('total_orders', 0)} commandes")
            except Exception as e:
                self.print_test("Statistiques", False, str(e))
                return False
            
            return True
            
        except Exception as e:
            self.print_test("DataManager g√©n√©ral", False, str(e))
            self.errors.append(f"DataManager: {e}")
            return False
    
    def test_ai_processor(self) -> bool:
        """Tester le processeur IA"""
        self.print_header("Test du Processeur IA")
        
        try:
            from ai_processor import AIProcessor
            
            # Initialisation
            try:
                ai = AIProcessor()
                self.print_test("Initialisation AIProcessor", True)
            except Exception as e:
                self.print_test("Initialisation AIProcessor", False, str(e))
                return False
            
            # Test nettoyage de message
            try:
                test_message = "Salut! Voici le lien: https://www.shein.com/fr/test123 - Taille M, couleur rouge, quantit√© 2"
                cleaned = ai.clean_message(test_message)
                self.print_test("Nettoyage message", True, f"Longueur: {len(cleaned)} caract√®res")
            except Exception as e:
                self.print_test("Nettoyage message", False, str(e))
                return False
            
            # Test extraction basique
            try:
                basic_info = ai.extract_basic_info(test_message)
                if basic_info.get('product_url'):
                    self.print_test("Extraction basique", True, f"URL trouv√©e: {basic_info['product_url']}")
                else:
                    self.print_test("Extraction basique", False, "Aucune URL trouv√©e")
            except Exception as e:
                self.print_test("Extraction basique", False, str(e))
                return False
            
            # Test extraction avanc√©e (seulement si cl√© API disponible)
            try:
                from config import Config
                if Config.OPENAI_API_KEY and Config.OPENAI_API_KEY.startswith('sk-'):
                    advanced_info = ai.extract_with_ai(test_message, "Test User")
                    if advanced_info:
                        self.print_test("Extraction IA", True, "Extraction r√©ussie")
                    else:
                        self.print_test("Extraction IA", False, "Aucune information extraite")
                else:
                    self.print_test("Extraction IA", False, "Cl√© API OpenAI non configur√©e (normal)")
            except Exception as e:
                self.print_test("Extraction IA", False, str(e))
            
            return True
            
        except Exception as e:
            self.print_test("AIProcessor g√©n√©ral", False, str(e))
            self.errors.append(f"AIProcessor: {e}")
            return False
    
    def test_shein_bot(self) -> bool:
        """Tester le bot Shein"""
        self.print_header("Test du Bot Shein")
        
        try:
            from shein_bot import SheinBot
            
            # Initialisation
            try:
                bot = SheinBot()
                self.print_test("Initialisation SheinBot", True)
            except Exception as e:
                self.print_test("Initialisation SheinBot", False, str(e))
                return False
            
            # Test v√©rification des cookies
            try:
                has_cookies = bot.has_valid_cookies()
                self.print_test("V√©rification cookies", True, 
                              f"Cookies {'valides' if has_cookies else 'non trouv√©s'}")
            except Exception as e:
                self.print_test("V√©rification cookies", False, str(e))
                return False
            
            # Test validation URL
            try:
                valid_url = bot.is_valid_shein_url("https://www.shein.com/fr/test123")
                invalid_url = bot.is_valid_shein_url("https://example.com")
                
                if valid_url and not invalid_url:
                    self.print_test("Validation URL", True, "URLs correctement valid√©es")
                else:
                    self.print_test("Validation URL", False, "Probl√®me de validation")
            except Exception as e:
                self.print_test("Validation URL", False, str(e))
                return False
            
            return True
            
        except Exception as e:
            self.print_test("SheinBot g√©n√©ral", False, str(e))
            self.errors.append(f"SheinBot: {e}")
            return False
    
    def test_recap_export(self) -> bool:
        """Tester l'exportateur de r√©capitulatifs"""
        self.print_header("Test de l'Exportateur")
        
        try:
            from recap_export import RecapExporter
            from data_manager import DataManager
            
            # Initialisation
            try:
                dm = DataManager()
                exporter = RecapExporter(dm)
                self.print_test("Initialisation RecapExporter", True)
            except Exception as e:
                self.print_test("Initialisation RecapExporter", False, str(e))
                return False
            
            # Test g√©n√©ration Excel
            try:
                excel_path = exporter.generate_excel_report()
                if excel_path and Path(excel_path).exists():
                    self.print_test("G√©n√©ration Excel", True, f"Fichier: {excel_path}")
                else:
                    self.print_test("G√©n√©ration Excel", False, "Fichier non cr√©√©")
            except Exception as e:
                self.print_test("G√©n√©ration Excel", False, str(e))
                return False
            
            # Test g√©n√©ration PDF
            try:
                pdf_path = exporter.generate_pdf_summary()
                if pdf_path and Path(pdf_path).exists():
                    self.print_test("G√©n√©ration PDF", True, f"Fichier: {pdf_path}")
                else:
                    self.print_test("G√©n√©ration PDF", False, "Fichier non cr√©√©")
            except Exception as e:
                self.print_test("G√©n√©ration PDF", False, str(e))
                return False
            
            # Test r√©capitulatif WhatsApp
            try:
                whatsapp_summary = exporter.get_whatsapp_summary()
                if whatsapp_summary:
                    self.print_test("R√©capitulatif WhatsApp", True, f"Longueur: {len(whatsapp_summary)} caract√®res")
                else:
                    self.print_test("R√©capitulatif WhatsApp", False, "R√©capitulatif vide")
            except Exception as e:
                self.print_test("R√©capitulatif WhatsApp", False, str(e))
                return False
            
            return True
            
        except Exception as e:
            self.print_test("RecapExporter g√©n√©ral", False, str(e))
            self.errors.append(f"RecapExporter: {e}")
            return False
    
    def test_whatsapp_listener(self) -> bool:
        """Tester l'√©couteur WhatsApp"""
        self.print_header("Test de l'√âcouteur WhatsApp")
        
        try:
            from whatsapp_listener import WhatsAppListener
            
            # Initialisation
            try:
                listener = WhatsAppListener()
                self.print_test("Initialisation WhatsAppListener", True)
            except Exception as e:
                self.print_test("Initialisation WhatsAppListener", False, str(e))
                return False
            
            # Test validation num√©ro
            try:
                valid_number = listener.is_valid_whatsapp_number("whatsapp:+221701234567")
                invalid_number = listener.is_valid_whatsapp_number("invalid")
                
                if valid_number and not invalid_number:
                    self.print_test("Validation num√©ro WhatsApp", True, "Num√©ros correctement valid√©s")
                else:
                    self.print_test("Validation num√©ro WhatsApp", False, "Probl√®me de validation")
            except Exception as e:
                self.print_test("Validation num√©ro WhatsApp", False, str(e))
                return False
            
            # Test formatage message
            try:
                formatted = listener.format_confirmation_message("Test User", "https://www.shein.com/fr/test123")
                if formatted and "Test User" in formatted:
                    self.print_test("Formatage message", True, "Message correctement format√©")
                else:
                    self.print_test("Formatage message", False, "Probl√®me de formatage")
            except Exception as e:
                self.print_test("Formatage message", False, str(e))
                return False
            
            return True
            
        except Exception as e:
            self.print_test("WhatsAppListener g√©n√©ral", False, str(e))
            self.errors.append(f"WhatsAppListener: {e}")
            return False
    
    def test_main_orchestrator(self) -> bool:
        """Tester l'orchestrateur principal"""
        self.print_header("Test de l'Orchestrateur Principal")
        
        try:
            from main import SheinSenOrchestrator
            
            # Initialisation
            try:
                orchestrator = SheinSenOrchestrator()
                self.print_test("Initialisation Orchestrateur", True)
            except Exception as e:
                self.print_test("Initialisation Orchestrateur", False, str(e))
                return False
            
            # Test statut syst√®me
            try:
                status = orchestrator.get_system_status()
                if status and 'status' in status:
                    self.print_test("Statut syst√®me", True, f"Statut: {status['status']}")
                else:
                    self.print_test("Statut syst√®me", False, "Statut non disponible")
            except Exception as e:
                self.print_test("Statut syst√®me", False, str(e))
                return False
            
            # Test m√©triques performance
            try:
                metrics = orchestrator.get_performance_metrics()
                if metrics:
                    self.print_test("M√©triques performance", True, f"{len(metrics)} m√©triques")
                else:
                    self.print_test("M√©triques performance", False, "M√©triques non disponibles")
            except Exception as e:
                self.print_test("M√©triques performance", False, str(e))
                return False
            
            return True
            
        except Exception as e:
            self.print_test("Orchestrateur g√©n√©ral", False, str(e))
            self.errors.append(f"Orchestrateur: {e}")
            return False
    
    def test_file_structure(self) -> bool:
        """Tester la structure des fichiers"""
        self.print_header("Test de la Structure des Fichiers")
        
        required_files = [
            'config.py',
            'data_manager.py',
            'ai_processor.py',
            'shein_bot.py',
            'recap_export.py',
            'whatsapp_listener.py',
            'main.py',
            'requirements.txt',
            'README.md',
            '.env.example'
        ]
        
        required_dirs = [
            'data',
            'logs',
            'cookies'
        ]
        
        all_success = True
        
        # V√©rifier les fichiers
        for file_name in required_files:
            file_path = self.project_root / file_name
            if file_path.exists():
                self.print_test(f"Fichier {file_name}", True)
            else:
                self.print_test(f"Fichier {file_name}", False, "Fichier manquant")
                all_success = False
        
        # V√©rifier les r√©pertoires
        for dir_name in required_dirs:
            dir_path = self.project_root / dir_name
            if dir_path.exists() and dir_path.is_dir():
                self.print_test(f"R√©pertoire {dir_name}/", True)
            else:
                self.print_test(f"R√©pertoire {dir_name}/", False, "R√©pertoire manquant")
                all_success = False
        
        return all_success
    
    def generate_test_report(self):
        """G√©n√©rer un rapport de test"""
        self.print_header("Rapport de Test")
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for result in self.test_results.values() if result['success'])
        failed_tests = total_tests - successful_tests
        
        print(f"\nüìä R√©sum√© des Tests:")
        print(f"   Total: {total_tests}")
        print(f"   ‚úÖ R√©ussis: {successful_tests}")
        print(f"   ‚ùå √âchou√©s: {failed_tests}")
        print(f"   üìà Taux de r√©ussite: {(successful_tests/total_tests*100):.1f}%")
        
        if self.errors:
            print(f"\nüö® Erreurs d√©tect√©es:")
            for i, error in enumerate(self.errors, 1):
                print(f"   {i}. {error}")
        
        # Sauvegarder le rapport
        report_path = self.project_root / 'logs' / f'test_report_{datetime.now().strftime("%Y%m%d_%H%M%S")}.json'
        report_path.parent.mkdir(exist_ok=True)
        
        report_data = {
            'timestamp': datetime.now().isoformat(),
            'summary': {
                'total_tests': total_tests,
                'successful_tests': successful_tests,
                'failed_tests': failed_tests,
                'success_rate': successful_tests/total_tests*100 if total_tests > 0 else 0
            },
            'test_results': self.test_results,
            'errors': self.errors
        }
        
        with open(report_path, 'w', encoding='utf-8') as f:
            json.dump(report_data, f, indent=2, ensure_ascii=False)
        
        print(f"\nüìÑ Rapport sauvegard√©: {report_path}")
        
        return successful_tests == total_tests
    
    def run_all_tests(self) -> bool:
        """Ex√©cuter tous les tests"""
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üß™ SHEIN_SEN Test Suite üß™                ‚ïë
‚ïë              Test de tous les composants syst√®me             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """)
        
        tests = [
            ('Structure des fichiers', self.test_file_structure),
            ('Imports des modules', self.test_imports),
            ('Configuration', self.test_configuration),
            ('Gestionnaire de donn√©es', self.test_data_manager),
            ('Processeur IA', self.test_ai_processor),
            ('Bot Shein', self.test_shein_bot),
            ('Exportateur', self.test_recap_export),
            ('√âcouteur WhatsApp', self.test_whatsapp_listener),
            ('Orchestrateur principal', self.test_main_orchestrator)
        ]
        
        for test_name, test_func in tests:
            try:
                print(f"\nüîÑ Ex√©cution: {test_name}...")
                test_func()
            except Exception as e:
                self.print_test(f"Test {test_name}", False, f"Erreur inattendue: {e}")
                self.errors.append(f"Test {test_name}: {e}")
                traceback.print_exc()
        
        return self.generate_test_report()

def main():
    """Point d'entr√©e principal"""
    try:
        tester = SheinSenTester()
        success = tester.run_all_tests()
        
        if success:
            print("\nüéâ Tous les tests sont pass√©s avec succ√®s!")
            print("‚úÖ Le syst√®me SHEIN_SEN est pr√™t √† √™tre utilis√©.")
            return 0
        else:
            print("\n‚ö†Ô∏è Certains tests ont √©chou√©.")
            print("üìã Consultez le rapport de test pour plus de d√©tails.")
            return 1
            
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Tests interrompus par l'utilisateur")
        return 1
    except Exception as e:
        print(f"\n‚ùå Erreur inattendue: {e}")
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main())